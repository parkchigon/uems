<?xml version="1.0" encoding="UTF-8"?>
<included>

	<timestamp key="currDay" datePattern="yyyy-MM-dd"/>
	<property name="LOG_HOME" value="/data/logs" />
	<property name="LOG_PATTERN" value="%d{yyyy-MM-dd HH:mm:ss} %-5level %logger{0}[%method:%line] - [%X{traceId}],%msg%n"/>
    <property name="REQ_LOG_PATTERN" value="[%X{traceId}],%msg%n"/>
	
	<appender name="FILE-QUERY" class="ch.qos.logback.core.rolling.RollingFileAppender">
		<encoder>
            <pattern>${LOG_PATTERN}</pattern>
        </encoder>	
		<file>${LOG_HOME}/bems/query/query.${currDay}.log</file>
		<rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
		    <fileNamePattern>${LOG_HOME}/bems/backup/query.%d{yyyy-MM-dd}.log.%i.gz</fileNamePattern>
            <maxHistory>180</maxHistory>
            <timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
                <maxFileSize>100MB</maxFileSize>
            </timeBasedFileNamingAndTriggeringPolicy>
		</rollingPolicy>
	</appender>	
	
	<appender name="FILE-ERROR" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <encoder>
            <pattern>${LOG_PATTERN}</pattern>
        </encoder>	
		<file>${LOG_HOME}/bems/error/error.${currDay}.log</file>
		<rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
		    <fileNamePattern>${LOG_HOME}/bems/backup/error.%d{yyyy-MM-dd}.log.%i.gz</fileNamePattern>
            <maxHistory>180</maxHistory>
            <timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
                <maxFileSize>100MB</maxFileSize>
            </timeBasedFileNamingAndTriggeringPolicy>
		</rollingPolicy>
	</appender>	
	
	<appender name="FILE-REQ" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <encoder>
            <pattern>${REQ_LOG_PATTERN}</pattern>
        </encoder>	
		<file>${LOG_HOME}/bems/reqSvc.${currDay}.log</file>
		<rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
		    <fileNamePattern>${LOG_HOME}/bems/backup/reqSvc.%d{yyyy-MM-dd}.log.%i.gz</fileNamePattern>
            <maxHistory>180</maxHistory>
            <timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
                <maxFileSize>100MB</maxFileSize>
            </timeBasedFileNamingAndTriggeringPolicy>
		</rollingPolicy>
	</appender>	
	
	<appender name="console" class="ch.qos.logback.core.ConsoleAppender">
		<encoder>
			<pattern>
				${LOG_PATTERN}
			</pattern>
		</encoder>
	</appender>
		
	<logger name="java.sql">
		<level value="error" />
		<appender-ref ref="console" />
	</logger>
	
	<!-- SQL문만을 로그로 남기며, PreparedStatement일 경우 관련된 argument 값으로 대체된 SQL문이 보여진다. -->
	<logger name="jdbc.sqlonly" additivity="false">
		<level value="info" />
		<appender-ref ref="console" />
	</logger>
	
	<!-- SQL문과 해당 SQL을 실행시키는데 수행된 시간 정보(milliseconds)를 포함한다. -->
	<logger name="jdbc.sqltiming"  additivity="false">
		<level value="error" />
		<appender-ref ref="console" />
	</logger>

	<!-- ResultSet을 제외한 모든 JDBC 호출 정보를 로그로 남긴다. 많은 양의 로그가 생성되므로 특별히 JDBC 문제를 
		추적해야 할 필요가 있는 경우를 제외하고는 사용을 권장하지 않는다. -->
 	<logger name="jdbc.audit" additivity="false">
		<level value="error" />
	</logger>
	
	<!-- ResultSet을 포함한 모든 JDBC 호출 정보를 로그로 남기므로 매우 방대한 양의 로그가 생성된다. -->
 	<logger name="jdbc.resultset" additivity="false">
		<level value="error" />
	</logger>

	<logger name="jdbc.connection"  additivity="false">
		<appender-ref ref="console" />
		<level value="error" />
	</logger>
 
	<logger name="jdbc.resultsettable" additivity="false">
		<level value="error" />
		<appender-ref ref="console" />
	</logger>    
	             
	<!-- WEB 요청 로그 -->
	<logger name="reqInfoLog" level="INFO">
        <appender-ref ref="FILE-REQ"/>
    </logger>
    	             
    <!-- 에러 로그 -->
	<logger name="error" level="INFO">
        <appender-ref ref="FILE-ERROR"/>
    </logger>    

	<!-- Root Logger -->
	<root level="INFO">
		<appender-ref ref="console" />
	</root>

</included>